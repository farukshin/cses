// https://cses.fi/problemset/task/1638#include <bits/stdc++.h>using namespace std;typedef long long ll;typedef long double ld;template<typename T>typename T::size_type GeneralizedLevenshteinDistance(const T &source,                                                     const T &target,                                                     typename T::size_type insert_cost = 1,                                                     typename T::size_type delete_cost = 1,                                                     typename T::size_type replace_cost = 1) {    if (source.size() > target.size()) {        return GeneralizedLevenshteinDistance(target, source, delete_cost, insert_cost, replace_cost);    }    using TSizeType = typename T::size_type;    const TSizeType min_size = source.size(), max_size = target.size();    std::vector<TSizeType> lev_dist(min_size + 1);    lev_dist[0] = 0;    for (TSizeType i = 1; i <= min_size; ++i) {        lev_dist[i] = lev_dist[i - 1] + delete_cost;    }    for (TSizeType j = 1; j <= max_size; ++j) {        TSizeType previous_diagonal = lev_dist[0], previous_diagonal_save;        lev_dist[0] += insert_cost;        for (TSizeType i = 1; i <= min_size; ++i) {            previous_diagonal_save = lev_dist[i];            if (source[i - 1] == target[j - 1]) {                lev_dist[i] = previous_diagonal;            } else {                lev_dist[i] = std::min(std::min(lev_dist[i - 1] + delete_cost, lev_dist[i] + insert_cost), previous_diagonal + replace_cost);            }            previous_diagonal = previous_diagonal_save;        }    }    return lev_dist[min_size];}void solve(){	string a,b;	cin>>a>>b;		cout<<GeneralizedLevenshteinDistance(a, b);}int main(){    ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL);    //cout.setf(std::ios::fixed); cout.precision(2);    	solve();    //int t; cin >> t; while (t--) solve();    return 0;}